#include <windows.h>
#include <time.h>
#include <math.h>
#define GLUT_DISABLE_ATEXIT_HACK
#include<cmath>
#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif


#include <iostream>
#include <GL/glut.h>

struct Point {
    float x, y;
};

// Clip the polygon against a single edge
void clipAgainstEdge(Point& p1, Point& p2, Point& clipEdge)
{
    Point output[10];
    int numOutput = 0;

    Point S = p2;
    Point P;

    for (int i = 0; i < numOutput; i++) {
        P = output[i];

        if ((clipEdge.x * (P.x - S.x) + clipEdge.y * (P.y - S.y)) < 0) {
            if ((clipEdge.x * (p2.x - S.x) + clipEdge.y * (p2.y - S.y)) >= 0) {
                Point intersection;
                intersection.x = S.x + (clipEdge.x * (P.x - S.x)) / (clipEdge.x * (P.x - S.x) + clipEdge.y * (P.y - S.y));
                intersection.y = S.y + (clipEdge.y * (P.y - S.y)) / (clipEdge.x * (P.x - S.x) + clipEdge.y * (P.y - S.y));
                output[numOutput++] = intersection;
            }
        }
        else {
            if ((clipEdge.x * (p2.x - S.x) + clipEdge.y * (p2.y - S.y)) < 0) {
                Point intersection;
                intersection.x = S.x + (clipEdge.x * (P.x - S.x)) / (clipEdge.x * (P.x - S.x) + clipEdge.y * (P.y - S.y));
                intersection.y = S.y + (clipEdge.y * (P.y - S.y)) / (clipEdge.x * (P.x - S.x) + clipEdge.y * (P.y - S.y));
                output[numOutput++] = intersection;
            }
            output[numOutput++] = P;
        }

        S = P;
    }

    p1 = output[0];
    p2 = output[1];
}

// Sutherland-Hodgman Polygon Clipping Algorithm
void clipPolygon(Point* polygon, int numVertices, Point* clipWindow, int numEdges)
{
    for (int i = 0; i < numEdges; i++) {
        Point edgeStart = clipWindow[i];
        Point edgeEnd = clipWindow[(i + 1) % numEdges];

        Point input[10];
        int numInput = numVertices;

        for (int j = 0; j < numVertices; j++) {
            input[j] = polygon[j];
        }

        Point output[10];
        int numOutput = 0;

        Point S = input[numInput - 1];
        Point P;

        for (int j = 0; j < numInput; j++) {
            P = input[j];

            if ((edgeEnd.x * (P.x - S.x) + edgeEnd.y * (P.y - S.y)) < 0) {
                if ((edgeEnd.x * (input[numInput - 1].x - S.x) + edgeEnd.y * (input[numInput - 1].y - S.y)) >= 0) {
                    Point intersection;
                    intersection.x = S.x + (edgeEnd.x * (P.x - S.x)) / (edgeEnd.x * (P.x - S.x) + edgeEnd.y * (P.y - S.y));
                    intersection.y = S.y + (edgeEnd.y * (P.y - S.y)) / (edgeEnd.x * (P.x - S.x) + edgeEnd.y * (P.y - S.y));
                    output[numOutput++] = intersection;
                }
            }
            else {
                if ((edgeEnd.x * (input[numInput - 1].x - S.x) + edgeEnd.y * (input[numInput - 1].y - S.y)) < 0) {
                    Point intersection;
                    intersection.x = S.x + (edgeEnd.x * (P.x - S.x)) / (edgeEnd.x * (P.x - S.x) + edgeEnd.y * (P.y - S.y));
                    intersection.y = S.y + (edgeEnd.y * (P.y - S.y)) / (edgeEnd.x * (P.x - S.x) + edgeEnd.y * (P.y - S.y));
                    output[numOutput++] = intersection;
                }
                output[numOutput++] = P;
            }

            S = P;
        }

        numVertices = numOutput;
        for (int j = 0; j < numVertices; j++) {
            polygon[j] = output[j];
        }
    }

    glColor3f(0.0f, 1.0f, 0.0f); // Green color for clipped polygon

    glBegin(GL_LINE_LOOP);
    for (int i = 0; i < numVertices; i++) {
        glVertex2f(polygon[i].x, polygon[i].y);
    }
    glEnd();
}

// Display function
void display()
{
    glClear(GL_COLOR_BUFFER_BIT);

    Point polygon[] = { { 0, 0 }, { 100, 0 }, { 100, 100 }, { 0, 100 } };
    int numVertices = sizeof(polygon) / sizeof(polygon[0]);

    Point clipWindow[] = { { 50, 50 }, { 150, 50 }, { 150, 150 }, { 50, 150 } };
    int numEdges = sizeof(clipWindow) / sizeof(clipWindow[0]);

    glColor3f(1.0f, 1.0f, 1.0f); // White color for clipping window

    glBegin(GL_LINE_LOOP);
    for (int i = 0; i < numEdges; i++) {
        glVertex2f(clipWindow[i].x, clipWindow[i].y);
    }
    glEnd();

    glColor3f(1.0f, 0.0f, 0.0f); // Red color for original polygon

    glBegin(GL_LINE_LOOP);
    for (int i = 0; i < numVertices; i++) {
        glVertex2f(polygon[i].x, polygon[i].y);
    }
    glEnd();

    clipPolygon(polygon, numVertices, clipWindow, numEdges);

    glFlush();
}

// Initialize OpenGL settings
void init()
{
    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
    gluOrtho2D(0, 200, 0, 200);
}

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(400, 400);
    glutCreateWindow("Sutherland-Hodgman Polygon Clipping Algorithm");
    glutDisplayFunc(display);
    init();
    glutMainLoop();

    return 0;
}
